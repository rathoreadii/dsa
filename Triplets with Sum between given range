vector<double> get(vector<double> A) {
double min1 = 10, min2 = 10, min3 = 10, max1 = -1, max2 = -1, max3 = -1;
for(int i=0; i<A.size(); i++) {
if(A[i]<min1) {
min3 = min2;
min2 = min1;
min1 = A[i];
}
else if(A[i]<min2) {
min3 = min2;
min2 = A[i];
}
else if(A[i]<min3) {
min3 = A[i];
}
if(A[i]>max1) {
max3 = max2;
max2 = max1;
max1 = A[i];
}
else if(A[i]>max2) {
max3 = max2;
max2 = A[i];
}
else if(A[i]>max3) {
max3 = A[i];
}
}
vector<double> max_min{min1, min2, min3, max1, max2, max3};
return max_min;
}

int Solution::solve(vector<string> &arr) {
vector<double> A, B, C;
int n = arr.size();
//create buckets
for(int i=0; i< n; i++) {
if(stod(arr[i]) < (double)2/3)
A.push_back(stod(arr[i]));
else if ( stod(arr[i]) < 1)
B.push_back(stod(arr[i]));
else
C.push_back(stod(arr[i]));
}
vector<double> A_maxmins = get(A), B_maxmins = get(B), C_maxmins = get(C);

//5 combinations
if((A_maxmins[3] + A_maxmins[4] + A_maxmins[5] > 1) || ((A_maxmins[3] + A_maxmins[4] + B_maxmins[3] > 1) &&
(A_maxmins[3] + A_maxmins[4] + B_maxmins[3] < 2)) || (A_maxmins[0] + A_maxmins[1] + C_maxmins[0] <2) ||
(A_maxmins[0] + B_maxmins[0] + B_maxmins[1] < 2) || (A_maxmins[0] + B_maxmins[0] + C_maxmins[0] < 2) )
return 1;
return 0;
}
