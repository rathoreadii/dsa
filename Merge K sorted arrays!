class Node
{
    public:
        
        int data;
        int i;
        int j;
        
        Node(int data, int row, int col)
        {
            this->data= data;
            i= row;
            j= col;
        }
        
};

class compare
{
    public:
        bool operator()(Node* a, Node* b)
            {
                return a->data > b->data;
            }
};

vector<int> Solution::solve(vector<vector<int> > &A) {
    
    priority_queue<Node*, vector<Node*>, compare> pq;
    
    for(int i= 0; i<A.size(); i++)
    {
        Node* temp= new Node(A[i][0], i, 0);
        pq.push(temp);
    }
    
    vector<int> ans;
    
    while(!pq.empty())
    {
        Node* temp= pq.top();
        ans.push_back(temp->data);
        pq.pop();
        
        int i= temp->i;
        int j= temp->j;
        
        if(j+1 < A[i].size())
        {
            Node* next= new Node(A[i][j+1], i, j+1);
            pq.push(next);
        }
    }
    
    return ans;
    
}
