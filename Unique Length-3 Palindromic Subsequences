class Solution {
public:
    int countPalindromicSubsequence(string s) {
        
        int n= s.length();
        vector<int> f(26, -1);
        vector<int> l(26, -1);

        // to track the first and last occurance of each char
        for(int i= 0; i< n; i++)
        {
            if(f[s[i] - 'a'] == -1)
                f[s[i] - 'a']= i;
            
            l[s[i] - 'a']= i;
        }

        unordered_set<string> ans;

        // trating each char as a mid char and checking if it can form a valid palin
        for(int i= 0; i< 26; i++)
        {
            if(f[i] != -1 && l[i] != -1 && f[i] < l[i])
            {
                unordered_set<char> m; // to track unique mid char and form palin
                for(int j= f[i] + 1; j< l[i]; j++)
                    m.insert(s[j]);
                
                for(char c: m)
                    ans.insert(string{char(i + 'a'), c, char(i + 'a')});
            }
        }

        return ans.size();
    }
};
