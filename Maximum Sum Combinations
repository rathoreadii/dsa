typedef pair<int, pair<int, int>> heapNode;

vector<int> Solution::solve(vector<int> &A, vector<int> &B, int C) {
    
    vector<int> result;
    int n= A.size();
    
    sort(A.begin(), A.end());
    sort(B.begin(), B.end());
    
    priority_queue<heapNode> pq;
    pq.push({A[n-1] + B[n-1], {n-1, n-1}});
    
    set<pair<int, int>> visited;
    visited.insert({n-1, n-1});
    
    while(C-- > 0 && !pq.empty())
    {
        heapNode top= pq.top();
        pq.pop();
        
        int sum= top.first;
        int i= top.second.first;
        int j= top.second.second;
        
        result.push_back(sum);
        
        if(i-1 >= 0 && visited.find({i-1, j}) == visited.end())
        {
            pq.push({A[i-1]+ B[j], {i-1, j}});
            visited.insert({i-1, j});
        }
        
        if(j-1 >= 0 && visited.find({i, j-1}) == visited.end())
        {
            pq.push({A[i] + B[j-1], {i, j-1}});
            visited.insert({i, j-1});
        }
    }
    
    return result;
}
