class Solution {
public:
    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {
        
        auto cmp= [](const tuple<double, int, int>& a, const tuple<double, int, int>& b){
            return get<0>(a) < get<0>(b);
        };

        priority_queue<tuple<double, int, int>, vector<tuple<double, int, int>>, decltype(cmp)> pq(cmp);

        for(auto &c: classes){
            int pass= c[0];
            int total= c[1];
            double gain= (double)(pass+1)/(total+1) - (double) pass/total;

            pq.push({gain, pass, total});
        }

        while(extraStudents--){
            auto[gain, pass, total]= pq.top();
            pq.pop();

            pass+= 1;
            total+= 1;

            double newGain= (double)(pass+1)/(total+1) - (double) pass/total;
            pq.push({newGain, pass, total});
        }

        double sum= 0.0;
        while(!pq.empty()){
            auto [gain, pass, total]= pq.top();
            pq.pop();

            sum+= (double) pass/total;
        }

        return sum/classes.size();
    }
};
