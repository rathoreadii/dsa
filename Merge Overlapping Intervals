/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 
 bool static inc(Interval i1, Interval i2)
 {
     return i1.start < i2.start;
 }
 
vector<Interval> Solution::merge(vector<Interval> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    
    sort(A.begin(), A.end(), inc);
    
    vector<Interval> v;
    
    int curs= A[0].start;
    int cure= A[0].end;
    
    for(int i= 1; i<A.size(); i++)
    {
        int news= A[i].start;
        int newe= A[i].end;
        
        if(cure >= news)
            cure= max(cure, newe);
        
        else
        {
            Interval I;
            I.start= curs;
            I.end= cure;
            v.push_back(I);
            
            curs= news;
            cure= newe;
        }
    }
    
    Interval I;
    I.start= curs;
    I.end= cure;
    v.push_back(I);
    
    return v;
    
}
