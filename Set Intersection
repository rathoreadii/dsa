// Comparator function for sorting intervals based on endpoint and startpoint
static bool cmp(vector<int> &a, vector<int> &b) {
    if (a[1] != b[1]) {
        // Sort by endpoint in ascending order
        return a[1] < b[1];
    }
    // If endpoints are equal, sort by startpoint in descending order
    return a[0] > b[0];
}

int Solution::setIntersection(vector<vector<int>> &A) {
    // Sort intervals based on endpoint and startpoint
    sort(A.begin(), A.end(), cmp);
    
    int cnt = 2; // Initial count for the first interval
    int n = A.size();
    pair<int, int> p;
    p.first = A[0][1] - 1; // Initialize the first element of the pair
    p.second = A[0][1];    // Initialize the second element of the pair
    
    // Iterate through the sorted intervals
    for (int i = 1; i < n; i++) {
        if (p.second < A[i][0]) {
            // If the start of the interval is greater than the current endpoint, add two elements to the set
            cnt += 2;
            p.second = A[i][1];
            p.first = p.second - 1;
        } else if (p.second == A[i][0]) {
            // If the end of the current interval is equal to the current endpoint, add one element to the set
            cnt++;
            p.first = p.second;
            p.second = A[i][1];
        } else if (p.first < A[i][0]) {
            // If the start of the current interval is greater than the first element of the pair, add one element to the set
            cnt++;
            if (p.second == A[i][1]) {
                p.first = p.second - 1;
            } else {
                p.first = p.second;
                p.second = A[i][1];
            }
        }
    }
    
    return cnt;
}

