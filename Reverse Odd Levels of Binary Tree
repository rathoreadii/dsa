/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* reverseOddLevels(TreeNode* root) {
        
        if(!root)
            return root;
        
        queue<TreeNode*> q;
        q.push(root);
        int lvl= 0;

        while(!q.empty())
        {
            int n= q.size();

            if(lvl % 2 == 1)
            {
                vector<TreeNode*> oddNodes(n);

                for(int i =0; i< n; i++)
                {
                    oddNodes[i]= q.front();
                    q.pop();

                    if(oddNodes[i]->left)
                        q.push(oddNodes[i]->left);
                    if(oddNodes[i]->right)
                        q.push(oddNodes[i]->right);
                }

                for(int i= 0, j= n-1; i < j; i++, j--)
                    swap(oddNodes[i]->val, oddNodes[j]->val);
            }
            else
            {
                for(int i= 0; i< n; i++)
                {
                    TreeNode* node= q.front();
                    q.pop();

                    if(node->left)
                        q.push(node->left);
                    if(node->right)
                        q.push(node->right);
                }
            }

            lvl++;
        }
        
        return root;
    }
};
