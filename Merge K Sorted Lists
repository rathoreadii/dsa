/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

class compare
{
    public:
        bool operator()(ListNode* a, ListNode* b)
        {
            return a->val > b->val; 
        }
};
 

ListNode* Solution::mergeKLists(vector<ListNode*> &A) {

    
    int k= A.size();
    priority_queue<ListNode*, vector<ListNode*>, compare> pq;
    
    if(k == 0)
        return NULL;
    
    for(int i=0; i<k; i++)
        if(A[i] != NULL)
            pq.push(A[i]);
    
    ListNode* head= NULL;
    ListNode* tail= NULL;
    
    while(!pq.empty())
    {
        ListNode* top= pq.top();
        pq.pop();
        
        if(top->next != NULL)
            pq.push(top->next);
        
        if(head == NULL)
        {
            head= top;
            tail= top;
        }
        else
        {
            tail->next= top;
            tail= top;
        }
    }
    
    return head;
    
}
